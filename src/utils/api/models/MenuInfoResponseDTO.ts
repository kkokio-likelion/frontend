/* tslint:disable */
/* eslint-disable */
/**
 * Kkokio API
 * <h3>JWT 토큰 구조</h3> <ul>     <li>subject: accountId</li>     <li>issuedAt: 발급 시간</li>     <li>expiration: 만료 시간</li>     <li>claims:</li>     <ol>         <li>username: 보여지는 이름</li>         <li>roles: 권한들</li>     </ol> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CategoryDtoOnly } from './CategoryDtoOnly';
import {
    CategoryDtoOnlyFromJSON,
    CategoryDtoOnlyFromJSONTyped,
    CategoryDtoOnlyToJSON,
} from './CategoryDtoOnly';

/**
 * 메뉴 정보 요청에 대한 응답 DTO
 * @export
 * @interface MenuInfoResponseDTO
 */
export interface MenuInfoResponseDTO {
    /**
     * 생성 시간 정보
     * @type {Date}
     * @memberof MenuInfoResponseDTO
     */
    createdAt?: Date;
    /**
     * 마지막 수정 시간 정보
     * @type {Date}
     * @memberof MenuInfoResponseDTO
     */
    updatedAt?: Date;
    /**
     * 삭제 시간 정보
     * @type {Date}
     * @memberof MenuInfoResponseDTO
     */
    deletedAt?: Date;
    /**
     * 메뉴 ID값
     * @type {number}
     * @memberof MenuInfoResponseDTO
     */
    menuId?: number;
    /**
     * 메뉴 이름
     * @type {string}
     * @memberof MenuInfoResponseDTO
     */
    menuName?: string;
    /**
     * 메뉴 가격
     * @type {number}
     * @memberof MenuInfoResponseDTO
     */
    menuPrice?: number;
    /**
     * 메뉴 설명
     * @type {string}
     * @memberof MenuInfoResponseDTO
     */
    menuSummary?: string;
    /**
     * 메뉴 대표 이미지 url
     * @type {string}
     * @memberof MenuInfoResponseDTO
     */
    menuImgUrl?: string;
    /**
     * 
     * @type {CategoryDtoOnly}
     * @memberof MenuInfoResponseDTO
     */
    categoryDtoOnly?: CategoryDtoOnly;
}

/**
 * Check if a given object implements the MenuInfoResponseDTO interface.
 */
export function instanceOfMenuInfoResponseDTO(value: object): value is MenuInfoResponseDTO {
    return true;
}

export function MenuInfoResponseDTOFromJSON(json: any): MenuInfoResponseDTO {
    return MenuInfoResponseDTOFromJSONTyped(json, false);
}

export function MenuInfoResponseDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): MenuInfoResponseDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'deletedAt': json['deletedAt'] == null ? undefined : (new Date(json['deletedAt'])),
        'menuId': json['menuId'] == null ? undefined : json['menuId'],
        'menuName': json['menuName'] == null ? undefined : json['menuName'],
        'menuPrice': json['menuPrice'] == null ? undefined : json['menuPrice'],
        'menuSummary': json['menuSummary'] == null ? undefined : json['menuSummary'],
        'menuImgUrl': json['menuImgUrl'] == null ? undefined : json['menuImgUrl'],
        'categoryDtoOnly': json['categoryDtoOnly'] == null ? undefined : CategoryDtoOnlyFromJSON(json['categoryDtoOnly']),
    };
}

export function MenuInfoResponseDTOToJSON(value?: MenuInfoResponseDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'deletedAt': value['deletedAt'] == null ? undefined : ((value['deletedAt']).toISOString()),
        'menuId': value['menuId'],
        'menuName': value['menuName'],
        'menuPrice': value['menuPrice'],
        'menuSummary': value['menuSummary'],
        'menuImgUrl': value['menuImgUrl'],
        'categoryDtoOnly': CategoryDtoOnlyToJSON(value['categoryDtoOnly']),
    };
}

