/* tslint:disable */
/* eslint-disable */
/**
 * Kkokio API
 * <h3>JWT 토큰 구조</h3> <ul>     <li>subject: accountId</li>     <li>issuedAt: 발급 시간</li>     <li>expiration: 만료 시간</li>     <li>claims:</li>     <ol>         <li>username: 보여지는 이름</li>         <li>roles: 권한들</li>     </ol> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountRegisterDto,
  AccountView,
  LoginIdUpdateDto,
  LoginPasswordUpdateDto,
  NameUpdateDto,
} from '../models/index';
import {
    AccountRegisterDtoFromJSON,
    AccountRegisterDtoToJSON,
    AccountViewFromJSON,
    AccountViewToJSON,
    LoginIdUpdateDtoFromJSON,
    LoginIdUpdateDtoToJSON,
    LoginPasswordUpdateDtoFromJSON,
    LoginPasswordUpdateDtoToJSON,
    NameUpdateDtoFromJSON,
    NameUpdateDtoToJSON,
} from '../models/index';

export interface RegisterRequest {
    accountRegisterDto: AccountRegisterDto;
}

export interface UpdateLoginIdRequest {
    accountId: number;
    loginIdUpdateDto: LoginIdUpdateDto;
}

export interface UpdateNameRequest {
    accountId: number;
    nameUpdateDto: NameUpdateDto;
}

export interface UpdatePasswordRequest {
    accountId: number;
    loginPasswordUpdateDto: LoginPasswordUpdateDto;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * 회원가입
     * 회원가입
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountView>> {
        if (requestParameters['accountRegisterDto'] == null) {
            throw new runtime.RequiredError(
                'accountRegisterDto',
                'Required parameter "accountRegisterDto" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountRegisterDtoToJSON(requestParameters['accountRegisterDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountViewFromJSON(jsonValue));
    }

    /**
     * 회원가입
     * 회원가입
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountView> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 로그인 ID 변경
     * 로그인 ID 변경
     */
    async updateLoginIdRaw(requestParameters: UpdateLoginIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountView>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling updateLoginId().'
            );
        }

        if (requestParameters['loginIdUpdateDto'] == null) {
            throw new runtime.RequiredError(
                'loginIdUpdateDto',
                'Required parameter "loginIdUpdateDto" was null or undefined when calling updateLoginId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/loginId`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LoginIdUpdateDtoToJSON(requestParameters['loginIdUpdateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountViewFromJSON(jsonValue));
    }

    /**
     * 로그인 ID 변경
     * 로그인 ID 변경
     */
    async updateLoginId(requestParameters: UpdateLoginIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountView> {
        const response = await this.updateLoginIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 이름 변경
     * 이름 변경
     */
    async updateNameRaw(requestParameters: UpdateNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountView>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling updateName().'
            );
        }

        if (requestParameters['nameUpdateDto'] == null) {
            throw new runtime.RequiredError(
                'nameUpdateDto',
                'Required parameter "nameUpdateDto" was null or undefined when calling updateName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/name`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NameUpdateDtoToJSON(requestParameters['nameUpdateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountViewFromJSON(jsonValue));
    }

    /**
     * 이름 변경
     * 이름 변경
     */
    async updateName(requestParameters: UpdateNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountView> {
        const response = await this.updateNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 비밀번호 변경
     * 비밀번호 변경
     */
    async updatePasswordRaw(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountView>> {
        if (requestParameters['accountId'] == null) {
            throw new runtime.RequiredError(
                'accountId',
                'Required parameter "accountId" was null or undefined when calling updatePassword().'
            );
        }

        if (requestParameters['loginPasswordUpdateDto'] == null) {
            throw new runtime.RequiredError(
                'loginPasswordUpdateDto',
                'Required parameter "loginPasswordUpdateDto" was null or undefined when calling updatePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{accountId}/password`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters['accountId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LoginPasswordUpdateDtoToJSON(requestParameters['loginPasswordUpdateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountViewFromJSON(jsonValue));
    }

    /**
     * 비밀번호 변경
     * 비밀번호 변경
     */
    async updatePassword(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountView> {
        const response = await this.updatePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
