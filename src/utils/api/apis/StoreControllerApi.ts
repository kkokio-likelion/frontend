/* tslint:disable */
/* eslint-disable */
/**
 * Kkokio API
 * <h3>JWT 토큰 구조</h3> <ul>     <li>subject: accountId</li>     <li>issuedAt: 발급 시간</li>     <li>expiration: 만료 시간</li>     <li>claims:</li>     <ol>         <li>username: 보여지는 이름</li>         <li>roles: 권한들</li>     </ol> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateStoreInfoRequest,
  PageStoreInfoResponseDTO,
  Pageable,
  StoreInfoResponseDTO,
} from '../models/index';
import {
    CreateStoreInfoRequestFromJSON,
    CreateStoreInfoRequestToJSON,
    PageStoreInfoResponseDTOFromJSON,
    PageStoreInfoResponseDTOToJSON,
    PageableFromJSON,
    PageableToJSON,
    StoreInfoResponseDTOFromJSON,
    StoreInfoResponseDTOToJSON,
} from '../models/index';

export interface CreateStoreInfoOperationRequest {
    createStoreInfoRequest?: CreateStoreInfoRequest;
}

export interface DeleteImageRequest {
    storedId: number;
}

export interface DeleteStoreInfoRequest {
    storeId: number;
}

export interface GetStoreInfoRequest {
    storeId: number;
}

export interface GetStoreInfoListRequest {
    pageable: Pageable;
}

export interface UpdateStoreInfoRequest {
    storeId: number;
    createStoreInfoRequest?: CreateStoreInfoRequest;
}

/**
 * 
 */
export class StoreControllerApi extends runtime.BaseAPI {

    /**
     * 가게 정보 등록
     * 가게 정보 등록
     */
    async createStoreInfoRaw(requestParameters: CreateStoreInfoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreInfoResponseDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/store/info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStoreInfoRequestToJSON(requestParameters['createStoreInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreInfoResponseDTOFromJSON(jsonValue));
    }

    /**
     * 가게 정보 등록
     * 가게 정보 등록
     */
    async createStoreInfo(requestParameters: CreateStoreInfoOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreInfoResponseDTO> {
        const response = await this.createStoreInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 가게 대표 이미지 정보만 제거
     * 가게 대표 이미지 제거
     */
    async deleteImageRaw(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreInfoResponseDTO>> {
        if (requestParameters['storedId'] == null) {
            throw new runtime.RequiredError(
                'storedId',
                'Required parameter "storedId" was null or undefined when calling deleteImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/store/image/{storedId}`.replace(`{${"storedId"}}`, encodeURIComponent(String(requestParameters['storedId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreInfoResponseDTOFromJSON(jsonValue));
    }

    /**
     * 가게 대표 이미지 정보만 제거
     * 가게 대표 이미지 제거
     */
    async deleteImage(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreInfoResponseDTO> {
        const response = await this.deleteImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 등록된 가게 정보 삭제
     * 가게 정보 삭제
     */
    async deleteStoreInfoRaw(requestParameters: DeleteStoreInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['storeId'] == null) {
            throw new runtime.RequiredError(
                'storeId',
                'Required parameter "storeId" was null or undefined when calling deleteStoreInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/store/info/{storeId}`.replace(`{${"storeId"}}`, encodeURIComponent(String(requestParameters['storeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 등록된 가게 정보 삭제
     * 가게 정보 삭제
     */
    async deleteStoreInfo(requestParameters: DeleteStoreInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStoreInfoRaw(requestParameters, initOverrides);
    }

    /**
     * 특정 가게 정보 조회
     * 특정 가게 정보 조회
     */
    async getStoreInfoRaw(requestParameters: GetStoreInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreInfoResponseDTO>> {
        if (requestParameters['storeId'] == null) {
            throw new runtime.RequiredError(
                'storeId',
                'Required parameter "storeId" was null or undefined when calling getStoreInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/store/info/{storeId}`.replace(`{${"storeId"}}`, encodeURIComponent(String(requestParameters['storeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreInfoResponseDTOFromJSON(jsonValue));
    }

    /**
     * 특정 가게 정보 조회
     * 특정 가게 정보 조회
     */
    async getStoreInfo(requestParameters: GetStoreInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreInfoResponseDTO> {
        const response = await this.getStoreInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 가게 주인 정보를 기반으로 소유한 가게 정보 목록 조회
     * 가게 정보 조회
     */
    async getStoreInfoListRaw(requestParameters: GetStoreInfoListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageStoreInfoResponseDTO>> {
        if (requestParameters['pageable'] == null) {
            throw new runtime.RequiredError(
                'pageable',
                'Required parameter "pageable" was null or undefined when calling getStoreInfoList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageable'] != null) {
            queryParameters['pageable'] = requestParameters['pageable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/store/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageStoreInfoResponseDTOFromJSON(jsonValue));
    }

    /**
     * 가게 주인 정보를 기반으로 소유한 가게 정보 목록 조회
     * 가게 정보 조회
     */
    async getStoreInfoList(requestParameters: GetStoreInfoListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageStoreInfoResponseDTO> {
        const response = await this.getStoreInfoListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 등록된 가게 정보 변경
     * 가게 정보 변경
     */
    async updateStoreInfoRaw(requestParameters: UpdateStoreInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreInfoResponseDTO>> {
        if (requestParameters['storeId'] == null) {
            throw new runtime.RequiredError(
                'storeId',
                'Required parameter "storeId" was null or undefined when calling updateStoreInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/store/info/{storeId}`.replace(`{${"storeId"}}`, encodeURIComponent(String(requestParameters['storeId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStoreInfoRequestToJSON(requestParameters['createStoreInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreInfoResponseDTOFromJSON(jsonValue));
    }

    /**
     * 등록된 가게 정보 변경
     * 가게 정보 변경
     */
    async updateStoreInfo(requestParameters: UpdateStoreInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreInfoResponseDTO> {
        const response = await this.updateStoreInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
